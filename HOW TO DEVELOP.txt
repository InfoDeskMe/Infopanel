
------- CONTENTS -------
I. FRONTEND APPLICATION
II. BACKEND APPLICATION
III. REST Api
------------------------

I. FRONTEND APPLICATION

The frontend app is a typical react app with no routes or any addons. All used special modules will be installed automatically via the package.json file. 
The app has the following structure: 

- app/assets 
    - css
        - app.css 
        (used for the custom css in the app)
        
        - Bootstrap.css 
        (user for the standard app's grid)
    
    - js
        - components
        (Now, there are only two basic components: layout and ticker. Layout is a "design" for the main construct grid. Ticker is a JS function for the ticker including it's source.) 

        - config
        (Config.js is a default config for the app in case the source is not available. Currently, I do not use it.)

        - app.js
        (This is the main slider logic of the app. All main JS functions can be found in this file.)

        - index.js
        (This is an standard entrypoint for a typical react app. Nothing special.) 

------------------------

II. BACKEND APPLICATION

The backend application is a typical php symfony app without any special addons. The backend app needs a database to work, so there is a special MySQL docker container in the docker-compose.yml 
The app uses twig templates as an html engine. 
Structure: 

- app/public
    - css
      (Bootstrap separated and Main.css is for the backend GUI)

    - js
      (All JS scripts are located here)

    - media
      (Favicon and support images)

    - uploads
      (this folder is empty, but if any administrator would like to upload a new image here is a final location)

- app/src 
    - Controller 
      (You will find all backend php controllers and entites for the database in this folder)

- app/templates 
    - (The app uses twig files for the frontend laout of GUI. Edit the GUI layout here)

- app/.env
    - (Database connection defined in this file)

------------------------

III. REST Api 

The most backend functions are written in php. The frontend app uses only GET and POST requests via fetch() for getting fresh updates from config.json, data_ticker.json and data.json. Where: 
- config.json - defines the main app configuration, for example, how long one slide will be showed. 
- data_ticker.json - defines the ticker information. Do not edit it manually! 
- data.json - defines the content of slides. Do not edit it manuelly!

The concept is pretty simple: Backend generates some config files in json format according to the php functions. 
The source for the frontend app can switched any time in app/assets/app.js or app/assets/components/ticker/MoveTicker.js    